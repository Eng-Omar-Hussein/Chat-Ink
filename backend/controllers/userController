const user = require('../models/userModel')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const mongoose= require('mongoose')

exports.login = async(req,res) =>{
  try 
   {
        const {email , password} = req.body
        const userExists = await user.findOne({email})

        if(userExists)
        {
             
            if(await bcrypt.compare(password,userExists.password))
            {
                const token = jwt.sign({id :userExists.email}, 'secretKey',{expiresIn:'1h'})
                return res.status(200).json({message : "You have logged in successfuly", token})
            }


            else 
            {
                return res.status(404).json({message:"Invalid email or password"})
            }


        }

    else 
        return res.status(404).json({message:"Invalid email or password"})

    } 
        catch (error) {
            return res.status(400).json({error : "Bad request "});

    }
    
}


exports.signUp = async (req,res) => {
    try 
    {
        const { firstName, lastName, email, password } = req.body;
        const userExists = await user.findOne({ email });

        if (!userExists) 
            { 
                const saltRounds= 10;
                const hashedPassword= await bcrypt.hash(password,saltRounds)

                const newUser = new user({ firstName, lastName, email, password : hashedPassword });
                await newUser.save(); 
                return res.status(201).json(newUser); 
            } 
            
            else {
                return res.status(400).json({message:"User already exists"});
            }

    } 
    
    catch (error) 
    {
        return res.status(400).json({message : "Bad request " });
    }
    
};

exports.updateUserInfo = async (req , res) => {
    try {

        const { firstName, lastName, email, password , profilePic } = req.body;
        const userExists = await user.findOne({ email });

        userExists.firstName = firstName; 
        userExists.lastName = lastName;
        userExists.email = email;
      
        const saltRounds= 10;
        const hashedPassword= await bcrypt.hash(password,saltRounds)
        userExists.password = hashedPassword;
        
        user.exists.profilePic=profilePic;

        await userExists.save();
        return res.status(200).json({message:"User info successfully updates " , user:userExists}); 


    } 
    
    catch (error) {
        return res.status(400).json({message : "Bad request , couldn't save the update"});

    }
}